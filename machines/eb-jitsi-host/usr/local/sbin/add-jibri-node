#!/usr/bin/bash
set -e

# ------------------------------------------------------------------------------
# ADD-JIBRI-NODE
# ------------------------------------------------------------------------------
# Add an additional Jibri node to the cluster.
#
# Usage:
#     add-jibri-node <NODE-ADDRESS>
# ------------------------------------------------------------------------------
SSH_CONFIG="/root/.ssh/jms-config"

APP="eb-jibri"
APP_REPO="https://github.com/emrahcom/emrah-bullseye-templates.git"
INSTALLER="https://raw.githubusercontent.com/emrahcom/emrah-bullseye-base/main/installer/eb"
NODE=$1

JITSI_ROOTFS="/var/lib/lxc/eb-jitsi/rootfs"
JIBRI_ROOTFS="/var/lib/lxc/eb-jibri-template/rootfs"

ssh_() {
    ssh -F $SSH_CONFIG $NODE -- "$@"
}

scp_() {
    scp -F $SSH_CONFIG $1 $NODE:$2
}


# ------------------------------------------------------------------------------
# trap on exit
# ------------------------------------------------------------------------------
function on_exit {
    if [[ "$COMPLETED" != true ]]; then
        cat <<EOF

Something went wrong. The installation couldn't be completed!
EOF
        exit 1
    else
        cat <<EOF

Completed successfully!
EOF
        exit 0
    fi
}

COMPLETED=false
trap on_exit EXIT

if [[ -z "$NODE" ]]; then
    cat <<EOF
Usage:
       add-jibri-node <NODE-ADDRESS>
EOF
    exit 1
fi


# ------------------------------------------------------------------------------
# exports
# ------------------------------------------------------------------------------
JITSI_FQDN=$(cat $JITSI_ROOTFS/root/meta/jitsi-fqdn || true)
JIBRI_VERSION=$(cat $JITSI_ROOTFS/root/meta/jibri-version || true)
JIBRI_PASSWD=$(cat $JITSI_ROOTFS/root/meta/jibri-passwd || true)
RECORDER_PASSWD=$(cat $JITSI_ROOTFS/root/meta/recorder-passwd || true)


# ------------------------------------------------------------------------------
# uploads
# ------------------------------------------------------------------------------
ssh_ "rm -f /root/.ssh/jibri"
if [[ -f /root/.ssh/jibri ]]; then
    scp_ /root/.ssh/jibri /root/.ssh/
fi

ssh_ "rm -f /root/.ssh/jms-CA.crt"
if [[ -f "$JITSI_ROOTFS/usr/local/share/ca-certificates/jms-CA.crt" ]]; then
    scp_ $JITSI_ROOTFS/usr/local/share/ca-certificates/jms-CA.crt /root/.ssh/
fi

ssh_ "rm -f /root/jitsi-component-sidecar.deb"
if [[ -f "/root/eb-store/jitsi-component-sidecar.deb" ]] && \
   [[ "DONT_RUN_COMPONENT_SIDECAR" != false ]]; then
    scp_ /root/eb-store/jitsi-component-sidecar.deb /root/
fi

ssh_ "rm -f /root/.ssh/sidecar.key"
if [[ -f /root/.ssh/sidecar.key ]] && \
   [[ "DONT_RUN_COMPONENT_SIDECAR" != false ]]; then
    scp_ /root/.ssh/sidecar.key /root/.ssh/
fi

ssh_ "rm -f /root/.ssh/sidecar.pem"
if [[ -f /root/.ssh/sidecar.pem ]] && \
   [[ "DONT_RUN_COMPONENT_SIDECAR" != false ]]; then
    scp_ /root/.ssh/sidecar.pem /root/.ssh/
fi

ssh_ "rm -f /root/env.sidecar"
if [[ -f "$JITSI_ROOTFS/root/meta/env.sidecar.jibri" ]] && \
   [[ "DONT_RUN_COMPONENT_SIDECAR" != false ]]; then
    scp_ $JITSI_ROOTFS/root/meta/env.sidecar.jibri /root/env.sidecar
fi


# ------------------------------------------------------------------------------
# installation
# ------------------------------------------------------------------------------
ssh_ <<EOS
set -e
apt-get -y --allow-releaseinfo-change update
apt-get -y install wget

rm -rf /tmp/eb-installer
wget $INSTALLER -O /tmp/eb-installer -T 30
EOS

ssh_ <<EOS
set -e
export APP_REPO=$APP_REPO
export JITSI_FQDN=$JITSI_FQDN
export JIBRI_VERSION=$JIBRI_VERSION
export JIBRI_PASSWD=$JIBRI_PASSWD
export RECORDER_PASSWD=$RECORDER_PASSWD
export DONT_RUN_HOST_CUSTOM_CA=true
export DONT_RUN_COMPONENT_SIDECAR=$DONT_RUN_COMPONENT_SIDECAR
export APT_PROXY=$APT_PROXY
export REINSTALL_BULLSEYE_IF_EXISTS=$REINSTALL_BULLSEYE_IF_EXISTS

cd /tmp
bash eb-installer $APP
EOS


# ------------------------------------------------------------------------------
# completed
# ------------------------------------------------------------------------------
COMPLETED=true
