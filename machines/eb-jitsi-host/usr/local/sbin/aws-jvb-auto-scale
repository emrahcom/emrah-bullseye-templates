#!/usr/bin/bash
set -e

# ------------------------------------------------------------------------------
# AWS JVB AUTO SCALE
# ------------------------------------------------------------------------------
# Number of idle JVB instances to keep available for upcoming requests.
JVB_IDLE=2
# Maximum number of JVB instances.
JVB_MAX=12
# Launch template name for JVB.
JVB_LAUNCH_TEMPLATE=""

SSH_CONFIG=/root/.ssh/jms-config
STATS=/tmp/jicofo-jvb-stats.json

# ------------------------------------------------------------------------------
# add jvb instances
# ------------------------------------------------------------------------------
function add-jvb-instances {
    needed=$1

    [[ "$needed" -lt 1 ]] && return

    aws ec2 run-instances --count "$needed" \
        --launch-template "LaunchTemplateName=$JVB_LAUNCH_TEMPLATE" \
        --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=jvb}]"
}

# ------------------------------------------------------------------------------
# manage jvb instances
#
# shutdown idle jvb instances if there are more than needed.
# add jvb instances if needed.
# ------------------------------------------------------------------------------
function manage-jvb-instances {
    allowed_idle=$1

    idle=0
    for ip in $(lxc-attach -qn eb-jitsi -- bash -c "netstat -tnp | \
        grep 5222 | grep ESTABLISHED | grep -v '127.0.0.1' | \
        awk '{print \$5}' | cut -d: -f1 | grep -v '172.22.22.' | sort -R")
    do
        # is it idle?
        state=$(ssh -qF $SSH_CONFIG $ip -- \
            lxc-attach -qn eb-jvb -- \
                curl -s http://127.0.0.1:8080/colibri/stats | \
                jq .conferences || true)
        [[ "$state" = "0" ]] && (( idle += 1 )) || continue

        # is its uptime greater than 600 sec?
        uptime=$(ssh -qF $SSH_CONFIG $ip -- cut -d '.' -f1 /proc/uptime)
        [[ "$uptime" -lt 600 ]] && continue

        # shutdown it if it's not needed
        if [[ "$idle" -gt "$allowed_idle" ]]; then
            ssh -qF $SSH_CONFIG $ip -- poweroff || true
        fi
    done

    # add instances if needed
    if [[ "$allowed_idle" -gt "$idle" ]]; then
        (( needed = allowed_idle - idle ))
        add-jvb-instances $needed
    fi
}

# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
# do nothing if the template is not set yet
[[ -z "$JVB_LAUNCH_TEMPLATE" ]] && exit

# get stats
rm -f $STATS
lxc-attach -qn eb-jitsi -- curl -s http://eb-jitsi:8888/stats >$STATS

# get jvb stats
jvb_count=$(jq .bridge_selector.operational_bridge_count $STATS)
conferences=$(jq .conferences $STATS)
participants=$(jq .participants $STATS)
(( jvb_allowed = JVB_MAX - jvb_count )) || true

# jvb needed
if [[ "$jvb_allowed" -gt 0 ]]; then
    if [[ "$jvb_allowed" -gt "$JVB_IDLE" ]]; then
        jvb_needed=$JVB_IDLE
    else
        jvb_needed=$jvb_allowed
    fi
else
    jvb_needed=0
fi

# manage jvb instances
manage-jvb-instances $jvb_needed
